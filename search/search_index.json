{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"another self-built home automation system \u00b6 My main focus was a robust, self-sufficient control system with which I could not depend on a proprietary system from a single manufacturer but could expand with hardware / software from different manufacturers. Here my choice fell on Simatic CPUs. The sensors and actuators are wired to these and they process the control program. Via the LAN interface, the CPUs communicate with a NAS running a data logger script. Here various data are stored in a mySQL database for later evaluation. As a central control system I use NodeRed which provides a webserver for operation (and a lot of help during development). Business view \u00b6 Requirements \u00b6 type desc robustnes When switching on (e.g. after a power failure) the system itself should start up and be active robustnes Services / applications on servers should be monitored automatically and restarted if necessary robustnes Backups of databases and other artifacts should be created automatically robustnes Basic functions like switching light on/off must work even if the control level or parts of the process level fail interoperability The different components of the system shall provide apis to exchange information and communicate with internal and external applications and systems. interoperability The system shall be open to different transport protocols and publishing / describing interfaces. interoperability For integrating iot devices the system shall provide a MQTT broker. That allows easy w-lan connecting of esp based devices interoperability The PLC shall communicate to sensors / actors hardwired, via modbus, analog voltage signals, ... interoperability The data formats, transport protocols and interfaces shall be derived from central managed masterdata Components \u00b6 source here another view with focus on interface protocolls Tip of course I am not liable for any damage caused by replicas ;-)","title":"Home"},{"location":"#another-self-built-home-automation-system","text":"My main focus was a robust, self-sufficient control system with which I could not depend on a proprietary system from a single manufacturer but could expand with hardware / software from different manufacturers. Here my choice fell on Simatic CPUs. The sensors and actuators are wired to these and they process the control program. Via the LAN interface, the CPUs communicate with a NAS running a data logger script. Here various data are stored in a mySQL database for later evaluation. As a central control system I use NodeRed which provides a webserver for operation (and a lot of help during development).","title":"another self-built home automation system"},{"location":"#business-view","text":"","title":"Business view"},{"location":"#requirements","text":"type desc robustnes When switching on (e.g. after a power failure) the system itself should start up and be active robustnes Services / applications on servers should be monitored automatically and restarted if necessary robustnes Backups of databases and other artifacts should be created automatically robustnes Basic functions like switching light on/off must work even if the control level or parts of the process level fail interoperability The different components of the system shall provide apis to exchange information and communicate with internal and external applications and systems. interoperability The system shall be open to different transport protocols and publishing / describing interfaces. interoperability For integrating iot devices the system shall provide a MQTT broker. That allows easy w-lan connecting of esp based devices interoperability The PLC shall communicate to sensors / actors hardwired, via modbus, analog voltage signals, ... interoperability The data formats, transport protocols and interfaces shall be derived from central managed masterdata","title":"Requirements"},{"location":"#components","text":"source here another view with focus on interface protocolls Tip of course I am not liable for any damage caused by replicas ;-)","title":"Components"},{"location":"control_system/","text":"Control system \u00b6 Node red \u00b6 As control system and for the connection of other devices I currently use node-RED . Node-RED is a programming tool for wiring together hardware devices, APIs and online services It has already implemented interfaces (which are called 'nodes') to a lot of devices I use. Requirements regarding plugins \u00b6 node-red-dashboard node-red-contrib-fritz node-red-contrib-s7 node-red-node-mysql node-red-contrib-os node-red-contrib-mqtt-broker node-red-node-email (outdated) node-red-contrib-netatmo node-red-contrib-netatmo-dashboard node-red-contrib-viera Dashboards \u00b6 It is easy to make quick dash boards to monitor the sensor and health state of the devices. Or to configure debug / control clients for different devices Grafana \u00b6 Using an open source solution is much easier than implementing a monitor dashboard yourself. Grafana is the open source analytics and monitoring solution for every database I had good experiences with grafana . Out of the box even larger time ranges are displayed performant. I can recommend this installation pages mqtt mosquitto \u00b6 Eclipse Mosquitto is an open source message broker that implements the MQTT protocol Raspberry setup \u00b6 Most of the control components are running as docker image on a raspberry. Here are a few steps to set up: enable ssh server copy the puplic key to the raspberry for easier access cat ~/.ssh/id_rsa.pub | ssh pi_name@192.168.xxx.xxx -p 22 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' get docker ` sudo apt-get update && sudo apt-get upgrade -y ` ` curl -sSL https://get.docker.com | sh ` ` sudo usermod -aG docker $USER ` setup container mqtt mosquitto docker run -itd -p 1883 :1883 -p 9001 :9001 --name mosquitto_ah eclipse-mosquitto setup container node red Mind that as long as we run the mosquitto and node-red container at the same host the --link mosquitto_ah:broker is necessary. If changing the deployment to different machines update the node-red-mqtt-server from broker to the new ip address sudo chown -R 1000 :1000 /home/pi/.node-red docker run -it -p 1880 :1880 -p 7724 :7724/udp -p 7725 :7725/udp -v /home/pi/.node-red:/data --restart = always --name nodered_ah --link mosquitto_ah:broker nodered/node-red setup container grafana docker volume create grafana-storage docker run -d -p 3000 :3000 -v grafana-storage:/var/lib/grafana --name = grafana_ah grafana/grafana setup pi hole The network ad blocking / monitoring software pi-hole.net is not really connected to the home automation system but it is always a good idear to have control over your network. dotNet tool \u00b6 The PC-Tool is written in C# and was developed during the commissioning phase (which will probably not be finished that soon ;-) ). The tool has a fancy surface and is suitable for carrying out basic parameter settings on the controller. It turns out that it is uncomfortable to rely on a windows pc to control the system. If you are interested you can look at it references.md Here are some historical pics of the outdated dot net pc tool. All devices / sensors / actuators could be configured in a parameter window. Due to its generic structure, any actuators can be added during runtime and addressed in the controller. These can then be positioned in the ui by drag and drop With this view all actors of a selected type can be observed and controlled Clicking on a specific image either triggers an action or opens a sub window with further options To visualize past data from the data logger the tool has a sql client with dashboard","title":"control"},{"location":"control_system/#control-system","text":"","title":"Control system"},{"location":"control_system/#node-red","text":"As control system and for the connection of other devices I currently use node-RED . Node-RED is a programming tool for wiring together hardware devices, APIs and online services It has already implemented interfaces (which are called 'nodes') to a lot of devices I use.","title":"Node red"},{"location":"control_system/#requirements-regarding-plugins","text":"node-red-dashboard node-red-contrib-fritz node-red-contrib-s7 node-red-node-mysql node-red-contrib-os node-red-contrib-mqtt-broker node-red-node-email (outdated) node-red-contrib-netatmo node-red-contrib-netatmo-dashboard node-red-contrib-viera","title":"Requirements regarding plugins"},{"location":"control_system/#dashboards","text":"It is easy to make quick dash boards to monitor the sensor and health state of the devices. Or to configure debug / control clients for different devices","title":"Dashboards"},{"location":"control_system/#grafana","text":"Using an open source solution is much easier than implementing a monitor dashboard yourself. Grafana is the open source analytics and monitoring solution for every database I had good experiences with grafana . Out of the box even larger time ranges are displayed performant. I can recommend this installation pages","title":"Grafana"},{"location":"control_system/#mqtt-mosquitto","text":"Eclipse Mosquitto is an open source message broker that implements the MQTT protocol","title":"mqtt mosquitto"},{"location":"control_system/#raspberry-setup","text":"Most of the control components are running as docker image on a raspberry. Here are a few steps to set up: enable ssh server copy the puplic key to the raspberry for easier access cat ~/.ssh/id_rsa.pub | ssh pi_name@192.168.xxx.xxx -p 22 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' get docker ` sudo apt-get update && sudo apt-get upgrade -y ` ` curl -sSL https://get.docker.com | sh ` ` sudo usermod -aG docker $USER ` setup container mqtt mosquitto docker run -itd -p 1883 :1883 -p 9001 :9001 --name mosquitto_ah eclipse-mosquitto setup container node red Mind that as long as we run the mosquitto and node-red container at the same host the --link mosquitto_ah:broker is necessary. If changing the deployment to different machines update the node-red-mqtt-server from broker to the new ip address sudo chown -R 1000 :1000 /home/pi/.node-red docker run -it -p 1880 :1880 -p 7724 :7724/udp -p 7725 :7725/udp -v /home/pi/.node-red:/data --restart = always --name nodered_ah --link mosquitto_ah:broker nodered/node-red setup container grafana docker volume create grafana-storage docker run -d -p 3000 :3000 -v grafana-storage:/var/lib/grafana --name = grafana_ah grafana/grafana setup pi hole The network ad blocking / monitoring software pi-hole.net is not really connected to the home automation system but it is always a good idear to have control over your network.","title":"Raspberry setup"},{"location":"control_system/#dotnet-tool","text":"The PC-Tool is written in C# and was developed during the commissioning phase (which will probably not be finished that soon ;-) ). The tool has a fancy surface and is suitable for carrying out basic parameter settings on the controller. It turns out that it is uncomfortable to rely on a windows pc to control the system. If you are interested you can look at it references.md Here are some historical pics of the outdated dot net pc tool. All devices / sensors / actuators could be configured in a parameter window. Due to its generic structure, any actuators can be added during runtime and addressed in the controller. These can then be positioned in the ui by drag and drop With this view all actors of a selected type can be observed and controlled Clicking on a specific image either triggers an action or opens a sub window with further options To visualize past data from the data logger the tool has a sql client with dashboard","title":"dotNet tool"},{"location":"field_level/","text":"Field level \u00b6 IoT multisensor \u00b6 ESP8266 \u00b6 To enable the esp8266 libs at Arduino IDE Go to File > Preferences -> Additional Board Manager URLs: http://arduino.esp8266.com/stable/package_esp8266com_index.json Tools > Board -> Boards Manager -> Search for ESP8266 and install Dependency libs: git clone https://github.com/knolleary/pubsubclient.git git clone https://github.com/adafruit/DHT-sensor-library.git copy to ~/Arduino/libraries Features: read temperatur / humility and publish cyclic read light lux and publish cyclic detect motion and publish at detection (on rising edge) MQTT Interface subscription topics (start with prefix(iot/v01) + esp_name + topic_type) e.g. iot/v01/nodeMCUIBS/config/get_status topic meaning /config/echo just send an reply /config/get_status[value: \"\"; status; prozess; heap] /config/set_name [new name] change name of esp (with prefix for topics) /config/send_intervall_sensor [new time in ms] e.g. \"10000\" for 10s /config/send_intervall_status watchdog with status information /config/reset [dht, setup, vars] GPIO usage pin DHT22 AM312 KY-018 1 VCC VCC GND 2 DATA=D7 OUT=D2/D5 VCC 3 nc GND DATA=A0 4 GND 3D case \u00b6 This is the 3D model of the case Downloads \u00b6 You can download the STL file here: new_multisensor_V0.1 The arduino sketch is stored here: ah_iot_multisensor_v06 Wetter station \u00b6 For the weather station I decided for the P03/3-Modbus from Elsner. With it I can get the weather data: Brightness (east, south and west sun), wind speed, temperature and precipitation. With the Modbus variant I want to keep the possibility open to connect several participants (in special room sensors) to the control system via the bus system. The heating system \u00b6 My heating consists of the 20qm solar collectors and the \"romantic\" stove in the living room as well as an ETA SH20 twin. During the installation I saw that a maintenance interface is attached to the display. On inquiry with the manufacturer I got the RS232 protocol and thus the possibility by a CM1241 to access it. Here the protocoll: Byte startsign: alwas \u2019{\u2019 == hex 0x7B Byte Servicekennung Byte Servicekennung Byte Anzahl der Nutzdatenbytes Byte Pr\u00fcfsumme: alle Nutzdatenbytes addiert, modulo 256 ab 6. Byte Nutzdaten last Byte stoppsign alwas \u2019}\u2019 == hex 0x7D settings of serial interface: 19200 Baud, 1 Startbit, 8 Datenbits, 1 Stoppbit, NoParity, NoHandshake Herewith I inform the heating control that it should send out the actual values cyclically: # SEND_PTP_start ( REQ := # cmd . eta_start , \"PORT\" := # CP_Adress , BUFFER := # frame_start ); # cmd . eta_start := FALSE ; # SEND_PTP_cmd ( REQ := # cmd . eta_cmd , \"PORT\" := # CP_Adress , BUFFER := # frame_cmd );","title":"field level"},{"location":"field_level/#field-level","text":"","title":"Field level"},{"location":"field_level/#iot-multisensor","text":"","title":"IoT multisensor"},{"location":"field_level/#esp8266","text":"To enable the esp8266 libs at Arduino IDE Go to File > Preferences -> Additional Board Manager URLs: http://arduino.esp8266.com/stable/package_esp8266com_index.json Tools > Board -> Boards Manager -> Search for ESP8266 and install Dependency libs: git clone https://github.com/knolleary/pubsubclient.git git clone https://github.com/adafruit/DHT-sensor-library.git copy to ~/Arduino/libraries Features: read temperatur / humility and publish cyclic read light lux and publish cyclic detect motion and publish at detection (on rising edge) MQTT Interface subscription topics (start with prefix(iot/v01) + esp_name + topic_type) e.g. iot/v01/nodeMCUIBS/config/get_status topic meaning /config/echo just send an reply /config/get_status[value: \"\"; status; prozess; heap] /config/set_name [new name] change name of esp (with prefix for topics) /config/send_intervall_sensor [new time in ms] e.g. \"10000\" for 10s /config/send_intervall_status watchdog with status information /config/reset [dht, setup, vars] GPIO usage pin DHT22 AM312 KY-018 1 VCC VCC GND 2 DATA=D7 OUT=D2/D5 VCC 3 nc GND DATA=A0 4 GND","title":"ESP8266"},{"location":"field_level/#3d-case","text":"This is the 3D model of the case","title":"3D case"},{"location":"field_level/#downloads","text":"You can download the STL file here: new_multisensor_V0.1 The arduino sketch is stored here: ah_iot_multisensor_v06","title":"Downloads"},{"location":"field_level/#wetter-station","text":"For the weather station I decided for the P03/3-Modbus from Elsner. With it I can get the weather data: Brightness (east, south and west sun), wind speed, temperature and precipitation. With the Modbus variant I want to keep the possibility open to connect several participants (in special room sensors) to the control system via the bus system.","title":"Wetter station"},{"location":"field_level/#the-heating-system","text":"My heating consists of the 20qm solar collectors and the \"romantic\" stove in the living room as well as an ETA SH20 twin. During the installation I saw that a maintenance interface is attached to the display. On inquiry with the manufacturer I got the RS232 protocol and thus the possibility by a CM1241 to access it. Here the protocoll: Byte startsign: alwas \u2019{\u2019 == hex 0x7B Byte Servicekennung Byte Servicekennung Byte Anzahl der Nutzdatenbytes Byte Pr\u00fcfsumme: alle Nutzdatenbytes addiert, modulo 256 ab 6. Byte Nutzdaten last Byte stoppsign alwas \u2019}\u2019 == hex 0x7D settings of serial interface: 19200 Baud, 1 Startbit, 8 Datenbits, 1 Stoppbit, NoParity, NoHandshake Herewith I inform the heating control that it should send out the actual values cyclically: # SEND_PTP_start ( REQ := # cmd . eta_start , \"PORT\" := # CP_Adress , BUFFER := # frame_start ); # cmd . eta_start := FALSE ; # SEND_PTP_cmd ( REQ := # cmd . eta_cmd , \"PORT\" := # CP_Adress , BUFFER := # frame_cmd );","title":"The heating system"},{"location":"hints/","text":"some useful hints \u00b6 usage MkDocs \u00b6 mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy Deploy your documentation to GitHub Pages localhost:8000 to view it in browser Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. web apps \u00b6 to draw some images: https://www.draw.io/ create some 3d models:","title":"Hints"},{"location":"hints/#some-useful-hints","text":"","title":"some useful hints"},{"location":"hints/#usage-mkdocs","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy Deploy your documentation to GitHub Pages localhost:8000 to view it in browser","title":"usage MkDocs"},{"location":"hints/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"hints/#web-apps","text":"to draw some images: https://www.draw.io/ create some 3d models:","title":"web apps"},{"location":"my_multiroom/","text":"my multiroom setup \u00b6 For my multiroom system I used Raspberry PI's, a Russound amplifier and Dali speakers. As \"remote control\" should work every device (PC/Tablet/Smartphone) with a UPNP client/App. In my central solution I have laid all the speaker cables from the different rooms to the network cabinet. With later implementation, a decentralized solution would also be possible. In case of LAN and power supply the Raspberry and the amplifier could disappear in the wall/ceiling next to the speaker. Media-player \u00b6 As in (almost) every modern household, no Raspberry PI should be missing. On the Raspberry there is a digital/analog converter from hifiberry.com plugged in, which feeds its signal into the amplifier. As media player software I use piCorePlayer which is a tiny core linux distribution running entirely in RAM. Amplifier \u00b6 After a long time of informing myself I ordered a refurbished Russound M850MC 8-channel amplifier from America via e-bay. R850MC_connections With its 19-inch format, it fits perfectly into the network cabinet and supplies the entire house in its current configuration. The living room and the kitchen are controlled in parallel via a single Raspberry. speaker \u00b6 For the loudspeakers (built-in speakers in plaster cardboard) I chose the PHANTOM series of the company Dali. In the living room I installed the IKON in the bathroom ceiling the PHANTOM-E-60 and in the hallway the PHANTOM-H-50. In the kitchen there was little space in the wall and so the wall unit was the perfect place to put the compact box ZENSOR-3 on it. synology server \u00b6 hosting the Logitech Media Server LMS","title":"multiroom"},{"location":"my_multiroom/#my-multiroom-setup","text":"For my multiroom system I used Raspberry PI's, a Russound amplifier and Dali speakers. As \"remote control\" should work every device (PC/Tablet/Smartphone) with a UPNP client/App. In my central solution I have laid all the speaker cables from the different rooms to the network cabinet. With later implementation, a decentralized solution would also be possible. In case of LAN and power supply the Raspberry and the amplifier could disappear in the wall/ceiling next to the speaker.","title":"my multiroom setup"},{"location":"my_multiroom/#media-player","text":"As in (almost) every modern household, no Raspberry PI should be missing. On the Raspberry there is a digital/analog converter from hifiberry.com plugged in, which feeds its signal into the amplifier. As media player software I use piCorePlayer which is a tiny core linux distribution running entirely in RAM.","title":"Media-player"},{"location":"my_multiroom/#amplifier","text":"After a long time of informing myself I ordered a refurbished Russound M850MC 8-channel amplifier from America via e-bay. R850MC_connections With its 19-inch format, it fits perfectly into the network cabinet and supplies the entire house in its current configuration. The living room and the kitchen are controlled in parallel via a single Raspberry.","title":"Amplifier"},{"location":"my_multiroom/#speaker","text":"For the loudspeakers (built-in speakers in plaster cardboard) I chose the PHANTOM series of the company Dali. In the living room I installed the IKON in the bathroom ceiling the PHANTOM-E-60 and in the hallway the PHANTOM-H-50. In the kitchen there was little space in the wall and so the wall unit was the perfect place to put the compact box ZENSOR-3 on it.","title":"speaker"},{"location":"my_multiroom/#synology-server","text":"hosting the Logitech Media Server LMS","title":"synology server"},{"location":"plc_lib_interface/","text":"plc FB lib \u00b6 aktor light \u00b6 udp interface -|-|- logic interface -|-|- aktor heater \u00b6 distributor upper floor circuit room location length 1 child east wall 87 2 child west wall 86 3 north west wall 88 4 bath wall 94 5 - - - 6 bath floor 51 distributor ground floor circuit room location length 1 entrance floor ? 2 office wall 112 3 living room wall 111 4 kitchen, dining wall 130 5 - - - 6 - - -","title":"plc lib"},{"location":"plc_lib_interface/#plc-fb-lib","text":"","title":"plc FB lib"},{"location":"plc_lib_interface/#aktor-light","text":"udp interface -|-|- logic interface -|-|-","title":"aktor light"},{"location":"plc_lib_interface/#aktor-heater","text":"distributor upper floor circuit room location length 1 child east wall 87 2 child west wall 86 3 north west wall 88 4 bath wall 94 5 - - - 6 bath floor 51 distributor ground floor circuit room location length 1 entrance floor ? 2 office wall 112 3 living room wall 111 4 kitchen, dining wall 130 5 - - - 6 - - -","title":"aktor heater"},{"location":"processing_level/","text":"Processing level \u00b6 For monitoring and control of most hard-wired sensor/actuator devices I use Siemens Simatic Series 1200 CPUs. These are actually used in industrial environments (so they meet my requirements regarding robustness) and were priced within my budget. The picture shows a sub-distributor during the construction phase. Right beside the multimeter you can see a 1214C CPU with 3x DI/DO expansion modules. The CPUs are programmed with SCL (Structured Control Language). The syntax is similar to Pascal. In the following I describe the user program in excerpts. Simatic PLC programm \u00b6 My focus was on a generic solution in order to be able to extend the control program easily or to port it to another environment without major adaptations. aktor interface \u00b6 For each actuator type (light, jalouse, socket, heating) there is a general function module that is instantiated for each device. Here is an example of the light building block. This is called several times in a superimposed \"control\" block. ash became light IF # turn_on THEN # switch_signal := true ; END_IF ; # Tturn_off ( IN := # turn_off , PT := t # 5 s , Q => # tmp_turn_off_hold ); IF # param . \"auto-off_lux_enable\" THEN # \"Tauto-off-lux\" ( IN := \"sense_lux_stairs_og\" > # param . \"auto-off_lux\" , PT := t # 10 s , Q => # tmp_turn_off_lux ); END_IF ; Since the interior of the house took place over the winter, I realized the light building block first. The module has one input to change the output signal and one input to switch it on and one input to switch it off. The output switches directly the coupling relay which controls the physical light. In the \"inner life\" of the module there is a delay to prevent the rear switching on/off (I implemented this function because of a stress test of my kids). In addition there is a timer which switches off the light after a configured time and the possibility to also switch off the light if a brightness value is exceeded. and getting dark again The blind building block was a little trickier. Because I can't evaluate the signal of the physical end stop in the control I measured the time of the up and down movement. The target position and the target angle of the slats (each in 0 - 100%) are transferred to an extra \"blind motor\" module. In this module, the time of the actual position and the actual angle is continuously normalized and the target values are approached in a state machine. In addition, I have locked a simultaneous up and down signal at the outputs at different positions. // normierung der position/zeit zwischen 0 - 100 # cur_data . position := REAL_TO_INT ( NORM_X ( MIN := 0 , VALUE := # cur_data . position_in_time , MAX := # DRIVING_TIME_POSITION ) * # DIGIT_SCALA ); # cur_data . angle := REAL_TO_INT ( NORM_X ( MIN := 0 , VALUE := # cur_data . angle_in_time , MAX := # DRIVING_TIME_ANGLE ) * # DIGIT_SCALA ); END_IF ; The blind module has the following features: When the up/down button is pressed briefly, the blind moves to the respective end position (i.e. completely up or completely down). If the blind is moving and the up/down button is pressed again, the motor stops. If a button is pressed for a longer period of time (> 300ms have become established), the motor moves until the button is released again. Automatic startup when a parameterized wind speed is exceeded (measured by the weather station) Time-controlled approach of a position and an angle (I have planned 10 events so far but needed a maximum of 4) still on the TO-DO list: event-based approaching of an angle due to solar radiation and room temperature heating module The heating module is kept simpler again. Due to the relatively sluggish wall heating, I have not yet implemented an exact regulation of the heating circuits. In order to avoid a constant toggling the servomotors switch off only with 0,5 degrees over target. In addition, an interval can be parameterized if the temperature falls below the target value and the time of day during which the module is to be active. For IBS purposes (and e.g. vacation time), the PC-Tool can also be used to switch to manual mode (defined on or off). TO-DO Current I have not yet realized the socket module. Currently I only switch the sockets in the children's room. Since here however a bedside lamp is switched I also used the light component for it. communication \u00b6 For external communication each CPU contains a net_interface block. Here a UDP/IP server is realized in a state machine which can be addressed e.g. via the PC-Tool. Each instance of an actuator block is given a unique ID. This ID can also be found in the PC tool. Data logger \u00b6 During the early implementing phase of the home automation system i needed some logging mechanism for bug finding. And after implementing this interface at the plc and i kept it for data logging. Meanwhile the usual data logging is realized within the control system (node red) but for redundancy purpose the mechanism is still alive. The main script provides a IP listener for every configuret plc connection. Messages from the remote clients will be parsed and stored in a db.","title":"process"},{"location":"processing_level/#processing-level","text":"For monitoring and control of most hard-wired sensor/actuator devices I use Siemens Simatic Series 1200 CPUs. These are actually used in industrial environments (so they meet my requirements regarding robustness) and were priced within my budget. The picture shows a sub-distributor during the construction phase. Right beside the multimeter you can see a 1214C CPU with 3x DI/DO expansion modules. The CPUs are programmed with SCL (Structured Control Language). The syntax is similar to Pascal. In the following I describe the user program in excerpts.","title":"Processing level"},{"location":"processing_level/#simatic-plc-programm","text":"My focus was on a generic solution in order to be able to extend the control program easily or to port it to another environment without major adaptations.","title":"Simatic PLC programm"},{"location":"processing_level/#aktor-interface","text":"For each actuator type (light, jalouse, socket, heating) there is a general function module that is instantiated for each device. Here is an example of the light building block. This is called several times in a superimposed \"control\" block. ash became light IF # turn_on THEN # switch_signal := true ; END_IF ; # Tturn_off ( IN := # turn_off , PT := t # 5 s , Q => # tmp_turn_off_hold ); IF # param . \"auto-off_lux_enable\" THEN # \"Tauto-off-lux\" ( IN := \"sense_lux_stairs_og\" > # param . \"auto-off_lux\" , PT := t # 10 s , Q => # tmp_turn_off_lux ); END_IF ; Since the interior of the house took place over the winter, I realized the light building block first. The module has one input to change the output signal and one input to switch it on and one input to switch it off. The output switches directly the coupling relay which controls the physical light. In the \"inner life\" of the module there is a delay to prevent the rear switching on/off (I implemented this function because of a stress test of my kids). In addition there is a timer which switches off the light after a configured time and the possibility to also switch off the light if a brightness value is exceeded. and getting dark again The blind building block was a little trickier. Because I can't evaluate the signal of the physical end stop in the control I measured the time of the up and down movement. The target position and the target angle of the slats (each in 0 - 100%) are transferred to an extra \"blind motor\" module. In this module, the time of the actual position and the actual angle is continuously normalized and the target values are approached in a state machine. In addition, I have locked a simultaneous up and down signal at the outputs at different positions. // normierung der position/zeit zwischen 0 - 100 # cur_data . position := REAL_TO_INT ( NORM_X ( MIN := 0 , VALUE := # cur_data . position_in_time , MAX := # DRIVING_TIME_POSITION ) * # DIGIT_SCALA ); # cur_data . angle := REAL_TO_INT ( NORM_X ( MIN := 0 , VALUE := # cur_data . angle_in_time , MAX := # DRIVING_TIME_ANGLE ) * # DIGIT_SCALA ); END_IF ; The blind module has the following features: When the up/down button is pressed briefly, the blind moves to the respective end position (i.e. completely up or completely down). If the blind is moving and the up/down button is pressed again, the motor stops. If a button is pressed for a longer period of time (> 300ms have become established), the motor moves until the button is released again. Automatic startup when a parameterized wind speed is exceeded (measured by the weather station) Time-controlled approach of a position and an angle (I have planned 10 events so far but needed a maximum of 4) still on the TO-DO list: event-based approaching of an angle due to solar radiation and room temperature heating module The heating module is kept simpler again. Due to the relatively sluggish wall heating, I have not yet implemented an exact regulation of the heating circuits. In order to avoid a constant toggling the servomotors switch off only with 0,5 degrees over target. In addition, an interval can be parameterized if the temperature falls below the target value and the time of day during which the module is to be active. For IBS purposes (and e.g. vacation time), the PC-Tool can also be used to switch to manual mode (defined on or off). TO-DO Current I have not yet realized the socket module. Currently I only switch the sockets in the children's room. Since here however a bedside lamp is switched I also used the light component for it.","title":"aktor interface"},{"location":"processing_level/#communication","text":"For external communication each CPU contains a net_interface block. Here a UDP/IP server is realized in a state machine which can be addressed e.g. via the PC-Tool. Each instance of an actuator block is given a unique ID. This ID can also be found in the PC tool.","title":"communication"},{"location":"processing_level/#data-logger","text":"During the early implementing phase of the home automation system i needed some logging mechanism for bug finding. And after implementing this interface at the plc and i kept it for data logging. Meanwhile the usual data logging is realized within the control system (node red) but for redundancy purpose the mechanism is still alive. The main script provides a IP listener for every configuret plc connection. Messages from the remote clients will be parsed and stored in a db.","title":"Data logger"},{"location":"references/","text":"References \u00b6 Contact \u00b6 My name is alexander kratzer and you can drop me an e-mail at babba@mail.de . Links / Downlads \u00b6 nr component link 0 this repo github.com/alexkratzer/autohomestack 1 dotNet pc tool (outdated) github.com/alexkratzer/ahGUI 2 pc - plc adapter github.com/alexkratzer/CpuPcStack","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#contact","text":"My name is alexander kratzer and you can drop me an e-mail at babba@mail.de .","title":"Contact"},{"location":"references/#links-downlads","text":"nr component link 0 this repo github.com/alexkratzer/autohomestack 1 dotNet pc tool (outdated) github.com/alexkratzer/ahGUI 2 pc - plc adapter github.com/alexkratzer/CpuPcStack","title":"Links / Downlads"},{"location":"topics_node/","text":"topics \u00b6 device-type device-value plc eg, og, car, esp basement, carport, .. netatmo base, outside, rain rpi3 self, media_eg, media_bath, media_hall component-type component-value description dl weather, sensor, aktor data logger events status error, self, ... i sensor_name, e.g. light_barrier, motion_sensor input values o aktor_name, e.g. light_bath_ceiling output values get global device values, e.g. get_all get from device set global device cmd, e.g. set_verbose set to device logging at DB \u00b6 All topics containing /status/log will be stored at table node_status_log v01/netatmo/base/status/log v01/netatmo/outdoor/status/log v01/netatmo/rain/status/log v01/rpi/4/status/log v01/rpi/OG_floor/status/log v01/rpi/EG_living/status/log v01/rpi/OG_bath/status/log general structure examples \u00b6 version device-type device-value component-type component-value example msg v01 plc eg dl eta v01 plc eg pd eta v01 plc eg status error v01 esp basement i pir1 v01 esp basement dl pir1 plc -> node_red \u00b6 plc function NodeSend___send() add prefix to topic v01/plc/ device-value is added from node_red while receiving (from IP address) component-type component-value message description pd eta values of ProzessData all pd components are filtert from node_log status error name + value description of error status => use FC NodeSend_status/error dl eta values maybe redundant to pd/eta ==> current deactivated at PLC o heater/bath node_red -> plc \u00b6 iot -> node_red \u00b6 node_red -> iot \u00b6","title":"node topics"},{"location":"topics_node/#topics","text":"device-type device-value plc eg, og, car, esp basement, carport, .. netatmo base, outside, rain rpi3 self, media_eg, media_bath, media_hall component-type component-value description dl weather, sensor, aktor data logger events status error, self, ... i sensor_name, e.g. light_barrier, motion_sensor input values o aktor_name, e.g. light_bath_ceiling output values get global device values, e.g. get_all get from device set global device cmd, e.g. set_verbose set to device","title":"topics"},{"location":"topics_node/#logging-at-db","text":"All topics containing /status/log will be stored at table node_status_log v01/netatmo/base/status/log v01/netatmo/outdoor/status/log v01/netatmo/rain/status/log v01/rpi/4/status/log v01/rpi/OG_floor/status/log v01/rpi/EG_living/status/log v01/rpi/OG_bath/status/log","title":"logging at DB"},{"location":"topics_node/#general-structure-examples","text":"version device-type device-value component-type component-value example msg v01 plc eg dl eta v01 plc eg pd eta v01 plc eg status error v01 esp basement i pir1 v01 esp basement dl pir1","title":"general structure examples"},{"location":"topics_node/#plc-node_red","text":"plc function NodeSend___send() add prefix to topic v01/plc/ device-value is added from node_red while receiving (from IP address) component-type component-value message description pd eta values of ProzessData all pd components are filtert from node_log status error name + value description of error status => use FC NodeSend_status/error dl eta values maybe redundant to pd/eta ==> current deactivated at PLC o heater/bath","title":"plc -&gt; node_red"},{"location":"topics_node/#node_red-plc","text":"","title":"node_red -&gt; plc"},{"location":"topics_node/#iot-node_red","text":"","title":"iot -&gt; node_red"},{"location":"topics_node/#node_red-iot","text":"","title":"node_red -&gt; iot"},{"location":"images/readme_plantuml/","text":"plantuml code for readme \u00b6 until I get the plant-uml plugin working here is the code to the pictures Components of the auto home stack \u00b6 @ startuml skinparam component { FontColor black AttributeFontColor black FontSize 17 AttributeFontSize 15 AttributeFontname Droid Sans Mono BackgroundColor # 6 A9EFF BorderColor black ArrowColor # 222266 } title auto home stack skinparam componentStyle uml2 node \"user interface\" { frame \"deprecated\" { [ dotnet pc tool ] # Gray } [ dotnet pc tool ] <--> udp_plc [ web client ] < .. > http } cloud { interface www [ AWS ] --> www [ netatmo ] -> www } node \"ahs\" { interface data_logger as data_logger interface mqtt [ data logger server ] as dls [ rpi_nodered ] as nr dls - up -> [ dashboard ] [ dashboard ] -> http dls <-- data_logger www -> nr http <--> nr nr - right -> [ plc_xx ] nr <-> dls nr <- down -> mqtt udp_plc <-> [ plc_xx ] data_logger <- [ plc_xx ] [ plc_xy ] - up -> [ plc_xx ] [ esp ] < . up . > mqtt [ sensor ] - up -> [ plc_xx ] [ aktor ] <- up - [ plc_xx ] } @ enduml legend \u00b6 @ startuml node \"Legend\" { package \"device\" { [ item 1 ] as TMS # Tomato } folder \"tst\" { [ item 2 ] as CM # Lime } } @ enduml node red \u00b6 @ startuml [ * ] --> NodeRed udp -> NodeRed NodeRed -> udp udp : plc interface mqtt --> NodeRed NodeRed --> mqtt mqtt : field level devices \\ nesp 8266 , \\ nwatchdog services , ... iot --> NodeRed NodeRed --> iot iot : other interfaces \\ nlike rest apis , AWS S3 , \\ nssh to linux devices , \\ n ... NodeRed --> db db : MySQL and \\ nInfluxDB NodeRed : store all prozess \\ nand event data \\ nprozess data with rule engine \\ n @ enduml","title":"Plantuml code"},{"location":"images/readme_plantuml/#plantuml-code-for-readme","text":"until I get the plant-uml plugin working here is the code to the pictures","title":"plantuml code for readme"},{"location":"images/readme_plantuml/#components-of-the-auto-home-stack","text":"@ startuml skinparam component { FontColor black AttributeFontColor black FontSize 17 AttributeFontSize 15 AttributeFontname Droid Sans Mono BackgroundColor # 6 A9EFF BorderColor black ArrowColor # 222266 } title auto home stack skinparam componentStyle uml2 node \"user interface\" { frame \"deprecated\" { [ dotnet pc tool ] # Gray } [ dotnet pc tool ] <--> udp_plc [ web client ] < .. > http } cloud { interface www [ AWS ] --> www [ netatmo ] -> www } node \"ahs\" { interface data_logger as data_logger interface mqtt [ data logger server ] as dls [ rpi_nodered ] as nr dls - up -> [ dashboard ] [ dashboard ] -> http dls <-- data_logger www -> nr http <--> nr nr - right -> [ plc_xx ] nr <-> dls nr <- down -> mqtt udp_plc <-> [ plc_xx ] data_logger <- [ plc_xx ] [ plc_xy ] - up -> [ plc_xx ] [ esp ] < . up . > mqtt [ sensor ] - up -> [ plc_xx ] [ aktor ] <- up - [ plc_xx ] } @ enduml","title":"Components of the auto home stack"},{"location":"images/readme_plantuml/#legend","text":"@ startuml node \"Legend\" { package \"device\" { [ item 1 ] as TMS # Tomato } folder \"tst\" { [ item 2 ] as CM # Lime } } @ enduml","title":"legend"},{"location":"images/readme_plantuml/#node-red","text":"@ startuml [ * ] --> NodeRed udp -> NodeRed NodeRed -> udp udp : plc interface mqtt --> NodeRed NodeRed --> mqtt mqtt : field level devices \\ nesp 8266 , \\ nwatchdog services , ... iot --> NodeRed NodeRed --> iot iot : other interfaces \\ nlike rest apis , AWS S3 , \\ nssh to linux devices , \\ n ... NodeRed --> db db : MySQL and \\ nInfluxDB NodeRed : store all prozess \\ nand event data \\ nprozess data with rule engine \\ n @ enduml","title":"node red"}]}